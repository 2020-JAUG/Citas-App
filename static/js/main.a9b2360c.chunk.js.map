{"version":3,"sources":["components/Form.jsx","components/Citas.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setActualizarCita","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Citas","newCitas","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9b2360c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst Form = ({crearCita}) => {\n\n    //Creamos el state de citas\n    const [cita, setActualizarCita] = useState({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    });\n    //Second state\n    const [error, setError] = useState(false);\n\n    //Function to upgrade the input, and We use array destructuring\n    const handleChange = e => {\n        setActualizarCita({ ...cita, [e.target.name]: e.target.value})\n    };\n\n    //Extract the values\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\n    \n    //Sending data\n    const handleSubmit = e => {\n        e.preventDefault();\n        \n        //Validating the appointment. NOTE: Trim removes blanks\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\n            setError(true)\n            return;\n        };\n\n        //Remove error message\n        setError(false);\n\n        //Assign an id\n        cita.id= uuidv4();\n\n        //Create appointment in main state\n        crearCita(cita);\n\n        //Reset form\n        setActualizarCita({\n            mascota: '',\n            propietario: '',\n            fecha: '',\n            hora: '',\n            sintomas: ''\n        });\n    };\n\n    return ( \n        <>\n        <h2>Pedir Cita</h2>\n\n        { error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null }\n\n        <form onSubmit={handleSubmit}>\n            <label>Nombre de tu mascota</label>\n            <input\n                type=\"text\"\n                name=\"mascota\"\n                className=\"u-full-width\"\n                placeholder=\"Nombre mascota\"\n                onChange={handleChange}\n                value={mascota}\n            /> \n\n            <label>Nombre del dueño</label>\n            <input\n                type=\"text\"\n                name=\"propietario\"\n                className=\"u-full-width\"\n                placeholder=\"Nombre del dueño\"\n                onChange={handleChange}\n                value={propietario}\n\n            />  \n\n            <label>Fecha</label>\n            <input\n                type=\"date\"\n                name=\"fecha\"\n                className=\"u-full-width\"\n                onChange={handleChange}\n                value={fecha}\n            />\n\n            <label>Hora</label>\n            <input\n                type=\"time\"\n                name=\"hora\"\n                className=\"u-full-width\"\n                onChange={handleChange}\n                value={hora}\n            />\n            \n            <label>Síntomas</label>\n            <textarea\n                className=\"u-full-width\"\n                name=\"sintomas\"\n                onChange={handleChange}\n                value={sintomas}\n            ></textarea>\n\n            <button\n                type=\"submit\"\n                className=\"u-full-width button\"\n            >Agregar Cita</button>          \n        </form>\n        </>\n     );\n};\n\nForm.propTypes = {\n    crearCita: PropTypes.func.isRequired\n};\n\nexport default Form;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Citas = ({ newCitas, eliminarCita }) => ( \n    <div className=\"cita\">\n        <p>Mascota: <span>{newCitas.mascota}</span> </p>\n        <p>Dueño: <span>{newCitas.propietario}</span> </p>\n        <p>Fecha: <span>{newCitas.fecha}</span> </p>\n        <p>Hora: <span>{newCitas.hora}</span> </p>\n        <p>Sintomas: <span>{newCitas.sintomas}</span> </p>\n\n        <button \n            className=\"u-full-width button2\"\n            onClick={ () => eliminarCita(newCitas.id) }\n        >Eliminar cita</button>\n    </div>\n );\n \nCitas.propTypes = {\n    newCitas: PropTypes.object.isRequired,\n    eliminarCita: PropTypes.func.isRequired\n};\n\nexport default Citas;","import React, { useState, useEffect } from 'react';\nimport Form from './components/Form.jsx';\nimport Citas from './components/Citas.jsx';\n\nfunction App() {\n  //Appointments in local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales) { \n    citasIniciales = []; \n  };\n\n  //Array of appointments\n  const [citas, setCitas] = useState(citasIniciales);\n\n  //UseEffect to update when there are changes on the component\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if(citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    };\n  }, [citas]);\n\n  //Function to take the current appointments and take the new ones\n  const crearCita = cita => { setCitas ([ ...citas, cita ])};\n\n  //Function remove appoinment by you id\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id );\n    setCitas(nuevasCitas);\n  };\n\n  //Conditional message\n  const titulo = citas.length === 0 ? 'Sin citas' : 'Citas';\n\n  return (\n  <>\n    <h1>Administrador de pacientes</h1>\n\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"one-half column\"> \n          <Form crearCita={crearCita}/>\n        </div>\n\n        <div className=\"one-half column\">\n          <h2>{titulo}</h2>\n              {citas.map(cita => (\n                <Citas \n                  newCitas={cita} \n                  key={cita.id}\n                  eliminarCita={eliminarCita}\n                  />\n            ))}\n        </div>\n      </div>\n    </div>\n\n    \n  </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}